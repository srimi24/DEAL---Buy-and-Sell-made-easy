{"ast":null,"code":"import React, { useContext, useEffect, useReducer, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\n// import { toast } from 'react-toastify';\nimport axios from \"axios\";\nimport { Store } from \"../Store\";\nimport { getError } from \"../utils\";\nimport Container from \"react-bootstrap/Container\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Form from \"react-bootstrap/Form\";\nimport { Helmet } from \"react-helmet-async\";\nimport LoadingBox from \"../components/LoadingBox\";\nimport MessageBox from \"../components/MessageBox\";\nimport Button from \"react-bootstrap/Button\";\n\n// const reducer = (state, action) => {\n//   switch (action.type) {\n//     case \"FETCH_REQUEST\":\n//       return { ...state, loading: true };\n//     case \"FETCH_SUCCESS\":\n//       return { ...state, loading: false };\n//     case \"FETCH_FAIL\":\n//       return { ...state, loading: false, error: action.payload };\n//     case \"UPDATE_REQUEST\":\n//       return { ...state, loadingUpdate: true };\n//     case \"UPDATE_SUCCESS\":\n//       return { ...state, loadingUpdate: false };\n//     case \"UPDATE_FAIL\":\n//       return { ...state, loadingUpdate: false };\n//     //next part -> for uploading the img\n//     case \"UPLOAD_REQUEST\":\n//       return { ...state, loadingUpload: true, errorUpload: \"\" };\n//     case \"UPLOAD_SUCCESS\":\n//       return {\n//         ...state,\n//         loadingUpload: false,\n//         errorUpload: \"\",\n//       };\n//     case \"UPLOAD_FAIL\":\n//       return { ...state, loadingUpload: false, errorUpload: action.payload };\n\n//     default:\n//       return state;\n//   }\n// };\n// export default function ProductEditScreen() {\n//   const navigate = useNavigate();\n//   const params = useParams(); // /product/:id\n//   const { id: productId } = params;\n//   //dynamically fetch data from the api\n//   const { state } = useContext(Store);\n//   const { userInfo } = state;\n//   //userInfo to authenticate the request to fetch product details from backend\n//   const [\n//     { loading, error, loadingUpdate, loadingUpload },\n//     dispatch,\n//   ] = useReducer(reducer, {\n//     loading: true,\n//     error: \"\",\n//   });\n\n//   const [name, setName] = useState(\"\");\n//   const [slug, setSlug] = useState(\"\");\n//   const [price, setPrice] = useState(\"\");\n//   const [image, setImage] = useState(\"\");\n//   const [images, setImages] = useState([]);\n//   const [category, setCategory] = useState(\"\");\n//   const [countInStock, setCountInStock] = useState(\"\");\n//   const [brand, setBrand] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         dispatch({ type: \"FETCH_REQUEST\" });\n//         const { data } = await axios.get(`/api/products/${productId}`);\n//         //get product id from url\n//         setName(data.name);\n//         setSlug(data.slug);\n//         setPrice(data.price);\n//         setImage(data.image);\n//         setImages(data.images);\n//         setCategory(data.category);\n//         setCountInStock(data.countInStock);\n//         setBrand(data.brand);\n//         setDescription(data.description);\n//         dispatch({ type: \"FETCH_SUCCESS\" });\n//       } catch (err) {\n//         dispatch({\n//           type: \"FETCH_FAIL\",\n//           payload: getError(err), //from utils.js\n//         });\n//       }\n//     };\n//     fetchData();\n//   }, [productId]);\n\n//   const submitHandler = async (e) => {\n//     e.preventDefault();\n//     try {\n//       dispatch({ type: \"UPDATE_REQUEST\" });\n//       await axios.put(\n//         `/api/products/${productId}`,\n//         {\n//           _id: productId,\n//           name,\n//           slug,\n//           price,\n//           image,\n//           images,\n//           category,\n//           brand,\n//           countInStock,\n//           description,\n//         },\n//         {\n//           headers: { Authorization: `Bearer ${userInfo.token}` },\n//         }\n//       );\n//       dispatch({\n//         type: \"UPDATE_SUCCESS\",\n//       });\n//       alert(\"Product updated successfully\");\n//       navigate(\"/admin/products\");\n//     } catch (err) {\n//       alert(\"failed\");\n//       dispatch({ type: \"UPDATE_FAIL\" });\n//     }\n//   };\n//   const uploadFileHandler = async (e, forImages) => {\n//     const file = e.target.files[0];\n//     const bodyFormData = new FormData();\n//     //fromdata -> creates readable(to upload files)\n//     bodyFormData.append(\"file\", file);\n//     try {\n//       dispatch({ type: \"UPLOAD_REQUEST\" });\n//       const { data } = await axios.post(\"/api/upload\", bodyFormData, {\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//           authorization: `Bearer ${userInfo.token}`,\n//         },\n//       });\n//       dispatch({ type: \"UPLOAD_SUCCESS\" });\n\n//       if (forImages) {\n//         setImages([...images, data.secure_url]);\n//       } else {\n//         setImage(data.secure_url); //from cloudinary\n//       }\n\n//       alert(\"Image uploaded successfully. click Update to apply it\");\n//     } catch (err) {\n//       alert(\"failed\");\n//       // toast.error(getError(err));\n//       dispatch({ type: \"UPLOAD_FAIL\", payload: getError(err) });\n//     }\n//   };\n//   const deleteFileHandler = async (fileName, f) => {\n//     console.log(fileName, f);\n//     console.log(images);\n//     console.log(images.filter((x) => x !== fileName));\n//     setImages(images.filter((x) => x !== fileName));\n//     alert(\"Image removed successfully. click Update to apply it\");\n//   };\n//   return (\n//     <Container className=\"small-container\">\n//       <Helmet>\n//         <title>Edit Product ${productId}</title>\n//         {/* dynamically manage the document's head section. */}\n//       </Helmet>\n//       <h1>Edit Product {productId}</h1>\n\n//       {loading ? (\n//         <LoadingBox></LoadingBox>\n//       ) : error ? (\n//         <MessageBox variant=\"danger\">{error}</MessageBox>\n//       ) : (\n//         <Form onSubmit={submitHandler}>\n//           <Form.Group className=\"mb-3\" controlId=\"name\">\n//             <Form.Label>Name</Form.Label>\n//             <Form.Control\n//               value={name}\n//               //onchange -> detects when the value of the input changes\n//               onChange={(e) => setName(e.target.value)}\n//               required\n//             />\n//           </Form.Group>\n//           <Form.Group className=\"mb-3\" controlId=\"slug\">\n//             <Form.Label>Slug</Form.Label>\n//             <Form.Control\n//               value={slug}\n//               onChange={(e) => setSlug(e.target.value)}\n//               required\n//             />\n//           </Form.Group>\n//           <Form.Group className=\"mb-3\" controlId=\"name\">\n//             <Form.Label>Price</Form.Label>\n//             <Form.Control\n//               value={price}\n//               onChange={(e) => setPrice(e.target.value)}\n//               required\n//             />\n//           </Form.Group>\n//           <Form.Group className=\"mb-3\" controlId=\"image\">\n//             <Form.Label>Image File</Form.Label>\n//             <Form.Control\n//               value={image}\n//               onChange={(e) => setImage(e.target.value)}\n//               required\n//             />\n//           </Form.Group>\n//           <Form.Group className=\"mb-3\" controlId=\"imageFile\">\n//             <Form.Label>Upload Image</Form.Label>\n//             <Form.Control type=\"file\" onChange={uploadFileHandler} />\n//             {loadingUpload && <LoadingBox></LoadingBox>}\n//           </Form.Group>\n\n//           <Form.Group className=\"mb-3\" controlId=\"additionalImage\">\n//             <Form.Label>Additional Images</Form.Label>\n//             {images.length === 0 && <MessageBox>No image</MessageBox>}\n//             <ListGroup variant=\"flush\">\n//               {images.map((x) => (\n//                 <ListGroup.Item key={x}>\n//                   {x}\n//                   <Button variant=\"light\" onClick={() => deleteFileHandler(x)}>\n//                     <i className=\"fa fa-times-circle\"></i>\n//                   </Button>\n//                 </ListGroup.Item>\n//               ))}\n//             </ListGroup>\n//           </Form.Group>\n//           <Form.Group className=\"mb-3\" controlId=\"additionalImageFile\">\n//             <Form.Label>Upload Aditional Image</Form.Label>\n//             <Form.Control\n//               type=\"file\"\n//               onChange={(e) => uploadFileHandler(e, true)}\n//             />\n//             {loadingUpload && <LoadingBox></LoadingBox>}\n//           </Form.Group>\n\n//           <Form.Group className=\"mb-3\" controlId=\"category\">\n//             <Form.Label>Category</Form.Label>\n//             <Form.Control\n//               value={category}\n//               onChange={(e) => setCategory(e.target.value)}\n//               required\n//             />\n//           </Form.Group>\n//           <Form.Group className=\"mb-3\" controlId=\"brand\">\n//             <Form.Label>Brand</Form.Label>\n//             <Form.Control\n//               value={brand}\n//               onChange={(e) => setBrand(e.target.value)}\n//               required\n//             />\n//           </Form.Group>\n//           <Form.Group className=\"mb-3\" controlId=\"countInStock\">\n//             <Form.Label>Count In Stock</Form.Label>\n//             <Form.Control\n//               value={countInStock}\n//               onChange={(e) => setCountInStock(e.target.value)}\n//               required\n//             />\n//           </Form.Group>\n//           <Form.Group className=\"mb-3\" controlId=\"description\">\n//             <Form.Label>Description</Form.Label>\n//             <Form.Control\n//               value={description}\n//               onChange={(e) => setDescription(e.target.value)}\n//               required\n//             />\n//           </Form.Group>\n//           <div className=\"mb-3\">\n//             <Button disabled={loadingUpdate} type=\"submit\">\n//               Update\n//               {/* user cannot click on update twice hence diabled */}\n//             </Button>\n//             {loadingUpdate && <LoadingBox></LoadingBox>}\n//             {/* if loading update is true show loading box */}\n//           </div>\n//         </Form>\n//       )}\n//     </Container>\n//   );\n// }","map":{"version":3,"names":["React","useContext","useEffect","useReducer","useState","useNavigate","useParams","axios","Store","getError","Container","ListGroup","Form","Helmet","LoadingBox","MessageBox","Button"],"sources":["C:/Srimitravinda/SYLLABUS - III SEM/Web Technologies/WEBTECH PROJECT/frontend/src/screens/ProductEditScreen.js"],"sourcesContent":["import React, { useContext, useEffect, useReducer, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\n// import { toast } from 'react-toastify';\nimport axios from \"axios\";\nimport { Store } from \"../Store\";\nimport { getError } from \"../utils\";\nimport Container from \"react-bootstrap/Container\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Form from \"react-bootstrap/Form\";\nimport { Helmet } from \"react-helmet-async\";\nimport LoadingBox from \"../components/LoadingBox\";\nimport MessageBox from \"../components/MessageBox\";\nimport Button from \"react-bootstrap/Button\";\n\n// const reducer = (state, action) => {\n//   switch (action.type) {\n//     case \"FETCH_REQUEST\":\n//       return { ...state, loading: true };\n//     case \"FETCH_SUCCESS\":\n//       return { ...state, loading: false };\n//     case \"FETCH_FAIL\":\n//       return { ...state, loading: false, error: action.payload };\n//     case \"UPDATE_REQUEST\":\n//       return { ...state, loadingUpdate: true };\n//     case \"UPDATE_SUCCESS\":\n//       return { ...state, loadingUpdate: false };\n//     case \"UPDATE_FAIL\":\n//       return { ...state, loadingUpdate: false };\n//     //next part -> for uploading the img\n//     case \"UPLOAD_REQUEST\":\n//       return { ...state, loadingUpload: true, errorUpload: \"\" };\n//     case \"UPLOAD_SUCCESS\":\n//       return {\n//         ...state,\n//         loadingUpload: false,\n//         errorUpload: \"\",\n//       };\n//     case \"UPLOAD_FAIL\":\n//       return { ...state, loadingUpload: false, errorUpload: action.payload };\n\n//     default:\n//       return state;\n//   }\n// };\n// export default function ProductEditScreen() {\n//   const navigate = useNavigate();\n//   const params = useParams(); // /product/:id\n//   const { id: productId } = params;\n//   //dynamically fetch data from the api\n//   const { state } = useContext(Store);\n//   const { userInfo } = state;\n//   //userInfo to authenticate the request to fetch product details from backend\n//   const [\n//     { loading, error, loadingUpdate, loadingUpload },\n//     dispatch,\n//   ] = useReducer(reducer, {\n//     loading: true,\n//     error: \"\",\n//   });\n\n//   const [name, setName] = useState(\"\");\n//   const [slug, setSlug] = useState(\"\");\n//   const [price, setPrice] = useState(\"\");\n//   const [image, setImage] = useState(\"\");\n//   const [images, setImages] = useState([]);\n//   const [category, setCategory] = useState(\"\");\n//   const [countInStock, setCountInStock] = useState(\"\");\n//   const [brand, setBrand] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         dispatch({ type: \"FETCH_REQUEST\" });\n//         const { data } = await axios.get(`/api/products/${productId}`);\n//         //get product id from url\n//         setName(data.name);\n//         setSlug(data.slug);\n//         setPrice(data.price);\n//         setImage(data.image);\n//         setImages(data.images);\n//         setCategory(data.category);\n//         setCountInStock(data.countInStock);\n//         setBrand(data.brand);\n//         setDescription(data.description);\n//         dispatch({ type: \"FETCH_SUCCESS\" });\n//       } catch (err) {\n//         dispatch({\n//           type: \"FETCH_FAIL\",\n//           payload: getError(err), //from utils.js\n//         });\n//       }\n//     };\n//     fetchData();\n//   }, [productId]);\n\n//   const submitHandler = async (e) => {\n//     e.preventDefault();\n//     try {\n//       dispatch({ type: \"UPDATE_REQUEST\" });\n//       await axios.put(\n//         `/api/products/${productId}`,\n//         {\n//           _id: productId,\n//           name,\n//           slug,\n//           price,\n//           image,\n//           images,\n//           category,\n//           brand,\n//           countInStock,\n//           description,\n//         },\n//         {\n//           headers: { Authorization: `Bearer ${userInfo.token}` },\n//         }\n//       );\n//       dispatch({\n//         type: \"UPDATE_SUCCESS\",\n//       });\n//       alert(\"Product updated successfully\");\n//       navigate(\"/admin/products\");\n//     } catch (err) {\n//       alert(\"failed\");\n//       dispatch({ type: \"UPDATE_FAIL\" });\n//     }\n//   };\n//   const uploadFileHandler = async (e, forImages) => {\n//     const file = e.target.files[0];\n//     const bodyFormData = new FormData();\n//     //fromdata -> creates readable(to upload files)\n//     bodyFormData.append(\"file\", file);\n//     try {\n//       dispatch({ type: \"UPLOAD_REQUEST\" });\n//       const { data } = await axios.post(\"/api/upload\", bodyFormData, {\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//           authorization: `Bearer ${userInfo.token}`,\n//         },\n//       });\n//       dispatch({ type: \"UPLOAD_SUCCESS\" });\n\n//       if (forImages) {\n//         setImages([...images, data.secure_url]);\n//       } else {\n//         setImage(data.secure_url); //from cloudinary\n//       }\n\n//       alert(\"Image uploaded successfully. click Update to apply it\");\n//     } catch (err) {\n//       alert(\"failed\");\n//       // toast.error(getError(err));\n//       dispatch({ type: \"UPLOAD_FAIL\", payload: getError(err) });\n//     }\n//   };\n//   const deleteFileHandler = async (fileName, f) => {\n//     console.log(fileName, f);\n//     console.log(images);\n//     console.log(images.filter((x) => x !== fileName));\n//     setImages(images.filter((x) => x !== fileName));\n//     alert(\"Image removed successfully. click Update to apply it\");\n//   };\n//   return (\n//     <Container className=\"small-container\">\n//       <Helmet>\n//         <title>Edit Product ${productId}</title>\n//         {/* dynamically manage the document's head section. */}\n//       </Helmet>\n//       <h1>Edit Product {productId}</h1>\n\n//       {loading ? (\n//         <LoadingBox></LoadingBox>\n//       ) : error ? (\n//         <MessageBox variant=\"danger\">{error}</MessageBox>\n//       ) : (\n//         <Form onSubmit={submitHandler}>\n//           <Form.Group className=\"mb-3\" controlId=\"name\">\n//             <Form.Label>Name</Form.Label>\n//             <Form.Control\n//               value={name}\n//               //onchange -> detects when the value of the input changes\n//               onChange={(e) => setName(e.target.value)}\n//               required\n//             />\n//           </Form.Group>\n//           <Form.Group className=\"mb-3\" controlId=\"slug\">\n//             <Form.Label>Slug</Form.Label>\n//             <Form.Control\n//               value={slug}\n//               onChange={(e) => setSlug(e.target.value)}\n//               required\n//             />\n//           </Form.Group>\n//           <Form.Group className=\"mb-3\" controlId=\"name\">\n//             <Form.Label>Price</Form.Label>\n//             <Form.Control\n//               value={price}\n//               onChange={(e) => setPrice(e.target.value)}\n//               required\n//             />\n//           </Form.Group>\n//           <Form.Group className=\"mb-3\" controlId=\"image\">\n//             <Form.Label>Image File</Form.Label>\n//             <Form.Control\n//               value={image}\n//               onChange={(e) => setImage(e.target.value)}\n//               required\n//             />\n//           </Form.Group>\n//           <Form.Group className=\"mb-3\" controlId=\"imageFile\">\n//             <Form.Label>Upload Image</Form.Label>\n//             <Form.Control type=\"file\" onChange={uploadFileHandler} />\n//             {loadingUpload && <LoadingBox></LoadingBox>}\n//           </Form.Group>\n\n//           <Form.Group className=\"mb-3\" controlId=\"additionalImage\">\n//             <Form.Label>Additional Images</Form.Label>\n//             {images.length === 0 && <MessageBox>No image</MessageBox>}\n//             <ListGroup variant=\"flush\">\n//               {images.map((x) => (\n//                 <ListGroup.Item key={x}>\n//                   {x}\n//                   <Button variant=\"light\" onClick={() => deleteFileHandler(x)}>\n//                     <i className=\"fa fa-times-circle\"></i>\n//                   </Button>\n//                 </ListGroup.Item>\n//               ))}\n//             </ListGroup>\n//           </Form.Group>\n//           <Form.Group className=\"mb-3\" controlId=\"additionalImageFile\">\n//             <Form.Label>Upload Aditional Image</Form.Label>\n//             <Form.Control\n//               type=\"file\"\n//               onChange={(e) => uploadFileHandler(e, true)}\n//             />\n//             {loadingUpload && <LoadingBox></LoadingBox>}\n//           </Form.Group>\n\n//           <Form.Group className=\"mb-3\" controlId=\"category\">\n//             <Form.Label>Category</Form.Label>\n//             <Form.Control\n//               value={category}\n//               onChange={(e) => setCategory(e.target.value)}\n//               required\n//             />\n//           </Form.Group>\n//           <Form.Group className=\"mb-3\" controlId=\"brand\">\n//             <Form.Label>Brand</Form.Label>\n//             <Form.Control\n//               value={brand}\n//               onChange={(e) => setBrand(e.target.value)}\n//               required\n//             />\n//           </Form.Group>\n//           <Form.Group className=\"mb-3\" controlId=\"countInStock\">\n//             <Form.Label>Count In Stock</Form.Label>\n//             <Form.Control\n//               value={countInStock}\n//               onChange={(e) => setCountInStock(e.target.value)}\n//               required\n//             />\n//           </Form.Group>\n//           <Form.Group className=\"mb-3\" controlId=\"description\">\n//             <Form.Label>Description</Form.Label>\n//             <Form.Control\n//               value={description}\n//               onChange={(e) => setDescription(e.target.value)}\n//               required\n//             />\n//           </Form.Group>\n//           <div className=\"mb-3\">\n//             <Button disabled={loadingUpdate} type=\"submit\">\n//               Update\n//               {/* user cannot click on update twice hence diabled */}\n//             </Button>\n//             {loadingUpdate && <LoadingBox></LoadingBox>}\n//             {/* if loading update is true show loading box */}\n//           </div>\n//         </Form>\n//       )}\n//     </Container>\n//   );\n// }\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC1E,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD;AACA,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,UAAU;AAChC,SAASC,QAAQ,QAAQ,UAAU;AACnC,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,IAAI,MAAM,sBAAsB;AACvC,SAASC,MAAM,QAAQ,oBAAoB;AAC3C,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,MAAM,MAAM,wBAAw},"metadata":{},"sourceType":"module"}